{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      //payload is the default parameter, can not change to other name\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: initialAuthState,\n  reducer: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // const counterReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"INCREMENT\":\n//       return {\n//         ...state,\n//         counter: state.counter + 1,\n//       };\n//     case \"DECREMENT\":\n//       return {\n//         ...state,\n//         counter: state.counter - 1,\n//       };\n//     case \"INCREASEBY5\":\n//       return {\n//         ...state,\n//         counter: state.counter + action.value,\n//       };\n//     case \"SHOWCOUNTER\":\n//       return {\n//         ...state,\n//         showCounter: !state.showCounter,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n// const store = createStore(counterReducer);\n\nconst store = configureStore({\n  //combination of reducers\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  } //   reducer: counterSlice.reducer,\n\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/andylau/Desktop/react-redux/src/store/index.js"],"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","reducer","login","logout","store","auth","counterActions","actions","authActions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CADU;AAEnBC,EAAAA,WAAW,EAAE;AAFM,CAArB;AAIA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,YAAY,EAAEA,YAFiB;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KAHO;;AAIRO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KANO;;AAORQ,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtB;AACAH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,OAAvC;AACD,KAVO;;AAWRC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAbO;AAHqB,CAAD,CAAhC;AAmBA,MAAMW,gBAAgB,GAAG;AACvBC,EAAAA,eAAe,EAAE;AADM,CAAzB;AAGA,MAAMC,SAAS,GAAGjB,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BJ,EAAAA,YAAY,EAAEa,gBAFc;AAG5BG,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,CAACV,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACD,KAHM;;AAIPI,IAAAA,MAAM,CAACX,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACD;;AANM;AAHmB,CAAD,CAA7B,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,KAAK,GAAGpB,cAAc,CAAC;AAC3B;AACAiB,EAAAA,OAAO,EAAE;AAAEf,IAAAA,OAAO,EAAEE,YAAY,CAACa,OAAxB;AAAiCI,IAAAA,IAAI,EAAEL,SAAS,CAACC;AAAjD,GAFkB,CAG3B;;AAH2B,CAAD,CAA5B;AAKA,OAAO,MAAMK,cAAc,GAAGlB,YAAY,CAACmB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAA9B;AAEP,eAAeH,KAAf","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true,\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      //payload is the default parameter, can not change to other name\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\nconst initialAuthState = {\n  isAuthenticated: false,\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: initialAuthState,\n  reducer: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n// const counterReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"INCREMENT\":\n//       return {\n//         ...state,\n//         counter: state.counter + 1,\n//       };\n//     case \"DECREMENT\":\n//       return {\n//         ...state,\n//         counter: state.counter - 1,\n//       };\n//     case \"INCREASEBY5\":\n//       return {\n//         ...state,\n//         counter: state.counter + action.value,\n//       };\n//     case \"SHOWCOUNTER\":\n//       return {\n//         ...state,\n//         showCounter: !state.showCounter,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n// const store = createStore(counterReducer);\nconst store = configureStore({\n  //combination of reducers\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n  //   reducer: counterSlice.reducer,\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}